import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import useProductStore from '../stores/useProductStore';
import useCartStore from '../stores/useCartStore';
import useAuthStore from '../stores/useAuthStore';
import '../css/DetailProduct.css';

const DetailProduct = () => {
  const { productId } = useParams();
  const navigate = useNavigate();
  const { products, fetchProductById } = useProductStore();
  const { addToCart, cart, getCart } = useCartStore();
  const { authUser } = useAuthStore();
  const [product, setProduct] = useState(null);
  const [loading, setLoading] = useState(true);
  const [quantity, setQuantity] = useState(1);
  const [showNotification, setShowNotification] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');

  useEffect(() => {
    const fetchProduct = async () => {
      try {
        await fetchProductById(productId);
        const selectedProduct = products.find((p) => p.id === parseInt(productId));
        setProduct(selectedProduct);
      } catch (error) {
        console.error('L·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m:', error);
      } finally {
        setLoading(false);
      }
    };

    const fetchCart = async () => {
      if (authUser) {
        try {
          await getCart(authUser.userName);
        } catch (error) {
          console.error('L·ªói khi l·∫•y gi·ªè h√†ng:', error);
        }
      }
    };

    fetchProduct();
    fetchCart();
  }, [productId, products, fetchProductById, authUser, getCart]);

  const handleAddToCart = async () => {
    if (!authUser) {
      try {
        await addToCart(null, product.id, product.productName, product.price, quantity, false);
        alert('S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o gi·ªè h√†ng t·∫°m. Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ l∆∞u v√†o gi·ªè h√†ng ch√≠nh th·ª©c!');
        navigate('/login');
      } catch (error) {
        alert('L·ªói khi th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng t·∫°m: ' + error.message);
        console.error(error);
      }
      return;
    }

    // T√≠nh s·ªë l∆∞·ª£ng s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng
    const existingItem = cart?.items?.find((item) => item.productId === parseInt(productId));
    const currentQuantityInCart = existingItem ? existingItem.quantity : 0;
    const totalRequestedQuantity = currentQuantityInCart + quantity;

    // Ki·ªÉm tra t·ªïng s·ªë l∆∞·ª£ng so v·ªõi t·ªìn kho
    if (totalRequestedQuantity > product.quantity) {
      setErrorMessage(
        ` S·ªë l∆∞·ª£ng t·ªìn kho ch·ªâ c√≥ (${product.quantity}). B·∫°n ƒë√£ c√≥ (${currentQuantityInCart}) trong gi·ªè h√†ng. Ch·ªâ ƒë∆∞·ª£c th√™m (${product.quantity - currentQuantityInCart}) s·∫£n ph·∫©m n·ªØa!`
      );
      return;
    }

    try {
      await addToCart(authUser.userName, product.id, product.productName, product.price, quantity, true);
      setShowNotification(true);
      setErrorMessage('');
      setQuantity(1); // Reset s·ªë l∆∞·ª£ng sau khi th√™m th√†nh c√¥ng
      // L√†m m·ªõi d·ªØ li·ªáu s·∫£n ph·∫©m
      await fetchProductById(productId);
      const updatedProduct = products.find((p) => p.id === parseInt(productId));
      setProduct(updatedProduct);
      // L√†m m·ªõi gi·ªè h√†ng
      await getCart(authUser.userName);
      setTimeout(() => setShowNotification(false), 3000);
    } catch (error) {
      setErrorMessage('L·ªói khi th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng: ' + error.message);
      console.error(error);
    }
  };

  const handleEditProduct = () => {
    navigate('/product-management');
  };

  const increaseQuantity = () => {
    if (quantity < product.quantity) {
      setQuantity(quantity + 1);
      setErrorMessage('');
    }
  };

  const decreaseQuantity = () => {
    if (quantity > 1) {
      setQuantity(quantity - 1);
      setErrorMessage('');
    }
  };

  const isAdmin = authUser?.roles?.includes('ROLE_ADMIN');

  if (loading) {
    return <div className="loading-container">ƒêang t·∫£i th√¥ng tin s·∫£n ph·∫©m...</div>;
  }

  if (!product) {
    return <div className="loading-container">Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!</div>;
  }

  return (
    <div className="detail-container">
      <button className="back-button" onClick={() => navigate('/dashboard')}>
        ‚¨Ö Quay l·∫°i
      </button>
      <h1 className="detail-title">{product.productName}</h1>
      <div className="detail-content">
        <img
          src={product.imageUrl}
          alt={product.productName}
          className="detail-image"
          onError={(e) => (e.target.src = 'https://via.placeholder.com/400x400?text=S·∫£n+ph·∫©m')}
        />
        <div className="detail-info">
          <p>
            <strong>Lo·∫°i s·∫£n ph·∫©m</strong>
            {product.category}
          </p>
          <p>
            <strong>M√¥ t·∫£</strong>
            {product.description}
          </p>
          <p>
            <strong>Gi√° b√°n</strong>
            <span className="price">${product.price.toLocaleString()}</span>
          </p>
          <p>
            <strong>S·ªë l∆∞·ª£ng</strong>
            {product.quantity}
            <span className={`badge ${product.quantity > 0 ? 'stock-badge' : 'out-of-stock-badge'}`}>
              {product.quantity > 0 ? 'C√≤n h√†ng' : 'H·∫øt h√†ng'}
            </span>
          </p>

          <div className="cart-actions">
            {!isAdmin && (
              <>
                <div className="quantity-selector">
                  <button
                    className="quantity-btn"
                    onClick={decreaseQuantity}
                    disabled={quantity <= 1}
                  >
                    -
                  </button>
                  <input
                    type="number"
                    className="quantity-input"
                    value={quantity}
                    onChange={(e) => {
                      const value = parseInt(e.target.value);
                      if (!isNaN(value) && value >= 1 && value <= product.quantity) {
                        setQuantity(value);
                        setErrorMessage('');
                      }
                    }}
                    min="1"
                    max={product.quantity}
                  />
                  <button
                    className="quantity-btn"
                    onClick={increaseQuantity}
                    disabled={quantity >= product.quantity}
                  >
                    +
                  </button>
                </div>
                <button
                  className="add-to-cart-btn"
                  onClick={handleAddToCart}
                  disabled={product.quantity === 0}
                >
                  <span className="cart-icon">üõí</span>
                  Th√™m v√†o gi·ªè h√†ng
                </button>
              </>
            )}
            {isAdmin && (
              <button
                className="edit-product-btn"
                onClick={handleEditProduct}
              >
                <span className="edit-icon">‚úé</span>
                S·ª≠a s·∫£n ph·∫©m
              </button>
            )}
          </div>
          {errorMessage && (
            <p className="error-message">{errorMessage}</p>
          )}
        </div>
      </div>

      {showNotification && (
        <div className="cart-notification">
          ‚úÖ ƒê√£ th√™m {quantity} s·∫£n ph·∫©m v√†o gi·ªè h√†ng!
        </div>
      )}
    </div>
  );
};

export default DetailProduct;